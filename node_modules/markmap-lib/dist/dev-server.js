"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.develop = develop;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _fs = require("fs");

var _events = require("events");

var _http = _interopRequireDefault(require("http"));

var _koa = _interopRequireDefault(require("koa"));

var _open = _interopRequireDefault(require("open"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _transform = require("./transform");

var _template = require("./template");

function watch(input) {
  let data;
  let promise;
  const events = new _events.EventEmitter();

  async function update() {
    const content = await _fs.promises.readFile(input, 'utf8');
    const d = (0, _transform.transform)(content || '');
    data = {
      ts: Date.now(),
      d
    };
    events.emit('updated');
    promise = null;
  }

  function safeUpdate() {
    if (!promise) promise = update();
    return promise;
  }

  function check() {
    _chokidar.default.watch(input).on('all', safeUpdate);
  }

  async function get() {
    if (!data) await safeUpdate();
    return data;
  }

  async function getChanged(ts, timeout = 10000) {
    if (data && (isNaN(ts) || ts < data.ts)) return data;

    try {
      await new Promise((resolve, reject) => {
        events.once('updated', resolve);
        setTimeout(() => {
          events.off('updated', resolve);
          reject();
        }, timeout);
      });
      return data;
    } catch (_unused) {
      return {};
    }
  }

  check();
  return {
    get,
    getChanged
  };
}

async function develop(options) {
  const {
    input,
    open: openFile = true
  } = options,
        rest = (0, _objectWithoutPropertiesLoose2.default)(options, ["input", "open"]);
  const watcher = watch(input);
  const html = (0, _template.fillTemplate)(null, rest) + `<script>
{
  let ts = 0;
  function refresh() {
    fetch(\`/data?ts=\${ts}\`).then(res => res.json()).then(res => {
      if (res.ts && res.ts > ts) {
        ts = res.ts;
        mm.setData(res.d);
        mm.fit();
      }
      setTimeout(refresh, 300);
    });
  }
  refresh();
}
</script>`;
  const app = new _koa.default();
  app.use(async (ctx, next) => {
    if (ctx.path === '/') {
      ctx.body = html;
    } else if (ctx.path === '/data') {
      ctx.body = await watcher.getChanged(ctx.query.ts);
    } else {
      await next();
    }
  });
  const handle = app.callback();

  const server = _http.default.createServer(handle);

  server.listen(() => {
    const {
      port
    } = server.address();
    console.log(`Listening at http://localhost:${port}`);
    if (openFile) (0, _open.default)(`http://localhost:${port}`);
  });
}